{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAGA,6BAA6B;AAC7B,+BAA+B;AAC/B;;GAEG;AACH,+BAAwB;AACxB,iCAAkC;AAElC,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;AAEhC;;GAEG;AAEH,MAAM,cAAc,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,GAAG,CAAS,WAAW,CAAC,CAAC,CAAC;AAC1F,aAAG,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAEhC;;GAEG;AAEH,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,aAAG,CAAC,CAAC;AAEtC;;GAEG;AAEH,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAC9B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5B,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAEpC;;GAEG;AAEH,SAAS,aAAa,CAAC,GAAoB;IACvC,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAa,EAAE,EAAE,CAAC,CAAC;IAEzC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;QACb,aAAa;QACb,OAAO,GAAG,CAAC;KACd;IAED,IAAI,IAAI,IAAI,CAAC,EAAE;QACX,cAAc;QACd,OAAO,IAAI,CAAC;KACf;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;GAEG;AAEH,SAAS,OAAO,CAAC,KAA4B;IACzC,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;QAC5B,MAAM,KAAK,CAAC;KACf;IAED,MAAM,IAAI,GAAG,OAAO,cAAc,KAAK,QAAQ;QAC3C,CAAC,CAAC,OAAO,GAAG,cAAc;QAC1B,CAAC,CAAC,OAAO,GAAG,cAAc,CAAC;IAE/B,uDAAuD;IACvD,QAAQ,KAAK,CAAC,IAAI,EAAE;QAChB,KAAK,QAAQ;YACT,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;YACtD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM;QACV,KAAK,YAAY;YACb,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;YAC3C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM;QACV;YACI,MAAM,KAAK,CAAC;KACnB;AACL,CAAC;AAED;;GAEG;AAEH,SAAS,WAAW;IAChB,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAC9B,MAAM,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;QACjC,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAI,IAAoB,CAAC,IAAI,CAAC;IAC3C,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;AAChC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport { AddressInfo } from \"net\";\nimport * as http from 'http';\nimport * as debug from \"debug\";\n/**\n * Module dependencies.\n */\nimport app from \"./app\";\nimport config = require(\"config\");\n\nconst log = debug('lvg:server');\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst normalizedPort = normalizePort(process.env.PORT || config.get<number>('REST.port'));\napp.set('port', normalizedPort);\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(normalizedPort);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val: string | number) {\n    const port = parseInt(val as string, 10);\n\n    if (isNaN(port)) {\n        // named pipe\n        return val;\n    }\n\n    if (port >= 0) {\n        // port number\n        return port;\n    }\n\n    return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error: NodeJS.ErrnoException) {\n    if (error.syscall !== 'listen') {\n        throw error;\n    }\n\n    const bind = typeof normalizedPort === 'string'\n        ? 'Pipe ' + normalizedPort\n        : 'Port ' + normalizedPort;\n\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n        case 'EACCES':\n            console.error(bind + ' requires elevated privileges');\n            process.exit(1);\n            break;\n        case 'EADDRINUSE':\n            console.error(bind + ' is already in use');\n            process.exit(1);\n            break;\n        default:\n            throw error;\n    }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n    const addr = server.address();\n    const bind = typeof addr === 'string'\n        ? 'pipe ' + addr\n        : 'port ' + (addr as AddressInfo).port;\n    log('Listening on ' + bind);\n}\n"]}